	.syntax unified
	.cpu cortex-m4
	.thumb
.data
	arr: .byte 0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233
.text
	.global main
	//GPIO
	.equ	RCC_AHB2ENR,	0x4002104C
	.equ	GPIOA_MODER,	0x48000000
	.equ	GPIOA_OTYPER,	0x48000004
	.equ	GPIOA_OSPEEDER,	0x48000008
	.equ	GPIOA_PUPDR,	0x4800000C
	.equ	GPIOA_IDR,		0x48000010
	.equ	GPIOA_ODR,		0x48000014  //PA5 6 7 output mode
	.equ	GPIOA_BSRR,		0x48000018 //set bit -> 1
	.equ	GPIOA_BRR,		0x48000028 //clear bit -> 0

	.equ GPIOC_MODER  , 0x48000800
    .equ GPIOC_OTYPER ,	0x48000804
    .equ GPIOC_OSPEEDR,	0x48000808
    .equ GPIOC_PUPDR  ,	0x4800080c
    .equ GPIOC_IDR    , 0x48000810

	//Din, CS, CLK offset
	.equ 	DIN,	0b100000 	//PA5
	.equ	CS,		0b1000000	//PA6
	.equ	CLK,	0b10000000	//PA7

	//max7219
	.equ	DECODE,			0x19 //decode control
	.equ	INTENSITY,		0x1A //brightness
	.equ	SCAN_LIMIT,		0x1B //how many digits to display
	.equ	SHUT_DOWN,		0x1C //shut down -- we did't use this
	.equ	DISPLAY_TEST,	0x1F //display test -- we did' use this

	//timer
	.equ	one_sec,		100 //try and error
	.equ	long, 			1000

main:
	BL GPIO_init
	BL max7219_init
	mov r12, #0
	mov r10, #0
	BL Display_fib
	BX LR
Display_fib:
	mov r6, #0
	cmp r12, #41
	it eq
	movseq r12, #0
	cmp r12, #39
	it le
	ldrle r1, =0x7

	cmp r12, #35
	it le
	ldrle r1, =0x6

	cmp r12, #30
	it le
	ldrle r1, =0x5

	cmp r12, #25
	it le
	ldrle r1, =0x4

	cmp r12, #20
	it le
	ldrle r1, =0x3

	cmp r12, #16
	it le
	ldrle r1, =0x2

	cmp r12, #11
	it le
	ldrle r1, =0x1

	cmp r12, #6
	it le
	ldrle r1, =0x0

	cmp r12, #40
	it eq
	ldreq r1, =0x1

	ldr r0, =SCAN_LIMIT
	bl MAX7219Send
display_loop:

	cmp r12, #13
	bgt more_than
	ldr r11, =arr
	ldrb r11, [r11, r12]
	b check_button
	more_than:
		cmp r12, #14
		it eq
		ldreq r11, =377
		cmp r12, #15
		it eq
		ldreq r11, =610
		cmp r12, #16
		it eq
		ldreq r11, =987
		cmp r12, #17
		it eq
		ldreq r11, =1597
		cmp r12, #18
		it eq
		ldreq r11, =2584
		cmp r12, #19
		it eq
		ldreq r11, =4181
		cmp r12, #20
		it eq
		ldreq r11, =6765
		cmp r12, #21
		it eq
		ldreq r11, =10946
		cmp r12, #22
		it eq
		ldreq r11, =17711
		cmp r12, #23
		it eq
		ldreq r11, =28657
		cmp r12, #24
		it eq
		ldreq r11, =46368
		cmp r12, #25
		it eq
		ldreq r11, =75025
		cmp r12, #26
		it eq
		ldreq r11, =121393
		cmp r12, #27
		it eq
		ldreq r11, =196418
		cmp r12, #28
		it eq
		ldreq r11, =317811
		cmp r12, #29
		it eq
		ldreq r11, =514229
		cmp r12, #30
		it eq
		ldreq r11, =832040
		cmp r12, #31
		it eq
		ldreq r11, =1346269
		cmp r12, #32
		it eq
		ldreq r11, =2178309
		cmp r12, #33
		it eq
		ldreq r11, =3524578
		cmp r12, #34
		it eq
		ldreq r11, =5702887
		cmp r12, #35
		it eq
		ldreq r11, =9227465
		cmp r12, #36
		it eq
		ldreq r11, =14930352
		cmp r12, #37
		it eq
		ldreq r11, =24157817
		cmp r12, #38
		it eq
		ldreq r11, =39088169
		cmp r12, #39
		it eq
		ldreq r11, =63245986
		b check_button


	check_end:
	mov r2, r1 		//此處的r1是顯示器需要用幾個數字
	adds r2, r2, #1 //由於r1是0-7因此r2要+1變成1-8
	mov r0, #1		//r0=1
	b light

light:
	cmp r12, #40	//若r12=40則跳到minus_one的loop
	beq minus_one
	mov r3, #10		//r3=10
	cmp r0, r2 		//若r0跟r2相同代表所有位數都顯示完畢
	bgt Display_fib
	udiv r5, r11, r3 	//r5=r11/10 (r11為應該顯示的數字) r5為r11除以10的商數
	mul r4, r5, r3 		//r4=r5*10
	subs r1, r11, r4 	//r1=r11-r4 (r1為r11除以10的餘數，也就是要印出的數字)
	udiv r11, r11, r3 	//把r11除以10，作為下次近來運算的r11 (例 123->12)
	bl MAX7219Send		//把r0(第幾個位數)及r1(輸出的值)傳入讓顯示器運作
	adds r0, r0, #1 	//r0+1 (下次進來時顯示的會是下一個顯示器)(從右至左)
	b light
minus_one:
	mov r0, #2 			//若近到minus_one代表已經按了40次，輸出的值應為-1
	mov r1, 0xA 		//但我們是用mod的方式來處理數字
	bl MAX7219Send		//因此沒辦法印出負號，所以我們把-1特別提出來寫
	mov r0, #1
	mov r1, 0x1
	bl MAX7219Send
	b Display_fib

check_button:
	ldr r5, [r8]		//r8為GPIOC_IDR load到r5
	lsr r5, r5, #13
	and r5, r5, 0x1 	//看看GPIOC_IDR是不是一(有沒有被按按鈕)

	cmp r5, #0			//R5是0的話則R10+1 (R10為去彈跳的計數器，
						超過設定的值就算是按下按鈕了)
	it eq
	addseq r10, r10, #1

	cmp r5, #1			//R5若是1則R10歸零(R5=0代表沒按或是還在不穩定階段)
	it eq
	moveq r10, #0

	ldr r9, =one_sec	//R9=one_sec
	cmp r10, r9 		//若r10=one_sec則代表按鈕已被按下
	it eq
	movseq r6, #1		//r6設成1

	ldr r9, =long		//r9=long
	cmp r10, r9 		//若r10=long則代表按鈕被長按
	it eq
	movseq r6, #2 		//r6設成2
	//beq clear_to_zero

	cmp r6, #1			//若按鈕被按下則r12+1(r12為按按鈕的計數器)
	it eq 				//之後回去display_fib重新檢視下個數字需要多少位數
	addseq r12, r12, #1 
	beq Display_fib 	

	cmp r6, #2			//若按鈕為長按則把r12設成0(因此會輸出0)
	it eq
	movseq r12, #0

	mov r6, #0			//若都沒被按或是還在不穩定狀態則進入check_end
	b check_end

GPIO_init:
	//enable GPIO port A
	ldr r0, =RCC_AHB2ENR
	mov r1, 0b101
	str r1, [r0]

	//enable GPIO PA7,6,5 for output mode=01
	ldr r0, =GPIOA_MODER
	ldr r2, =0xABFF57FF  //0xFFFF 01 01 01 (765) 11 FF
	str r2, [r0]

	//GPIOA_OTYPER: push-pull (reset state)

	//default low speed, set to high speed=10
	ldr r0, =GPIOA_OSPEEDER
	ldr r1, =0x0000A800 //1010 10(765)00 00
	str r1, [r0]

	ldr r0, =GPIOC_MODER
	ldr r1, [r0]
	//clear pc13 to zero
	and r1, r1, 0xf3ffffff
	str r1,	[r0]

	ldr r8, =GPIOC_IDR
	BX LR


MAX7219Send:
	push {r0, r1, r2, r3, r4, r5, r6, r7, LR}
	lsl r0, r0, #8
	add r0, r0, r1
	ldr r1, =DIN
	ldr r2, =CS
	ldr r3, =CLK
	ldr r4, =GPIOA_BSRR
	ldr r5, =GPIOA_BRR
	ldr r6, =0xF

send_loop:
	mov r7, #1
	lsl r7, r7, r6
	str r3, [r5]
	tst r0, r7
	beq bit_not_set
	str r1, [r4]
	b if_done

bit_not_set:
	str r1, [r5]

if_done:
	str r3, [r4]
	sub r6, r6, #1
	cmp r6, 0
	bge send_loop
	str r2, [r5]
	str r2, [r4]
	pop {r0, r1, r2, r3, r4, r5, r6, r7, PC}
	bx lr



max7219_init:
	//TODO: Initialize max7219 registers
	push {r0, r1, LR}
	ldr r0, =DECODE
	ldr r1, =0xFF
	bl MAX7219Send

	ldr r0, =DISPLAY_TEST
	ldr r1, =0x0 //normal operation
	bl MAX7219Send

	ldr r0, =INTENSITY
	ldr r1, =0xA // 21/32 (brightness)
	bl MAX7219Send

	ldr r0, =SCAN_LIMIT
	ldr r1, =0x0
	bl MAX7219Send

	ldr r0, =SHUT_DOWN
	ldr r1, =0x1 //normal operation
	bl MAX7219Send

	pop {r0, r1, PC}
	BX LR


